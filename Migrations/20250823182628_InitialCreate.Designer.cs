// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server_tic_tac_toe.Infrastructure.Persistence;

#nullable disable

namespace server_tic_tac_toe.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250823182628_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server_tic_tac_toe.Domain.Entities.GameMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Closing")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FirstPlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondPlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FirstPlayerId");

                    b.HasIndex("SecondPlayerId");

                    b.ToTable("GameMatches");
                });

            modelBuilder.Entity("server_tic_tac_toe.Domain.Entities.Move", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssociatedMatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MovementTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PositionColumn")
                        .HasColumnType("integer");

                    b.Property<int>("PositionRow")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResponsiblePlayerId")
                        .HasColumnType("uuid");

                    b.Property<char>("Symbol")
                        .HasColumnType("character(1)");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedMatchId");

                    b.HasIndex("ResponsiblePlayerId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("server_tic_tac_toe.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("server_tic_tac_toe.Domain.Entities.GameMatch", b =>
                {
                    b.HasOne("server_tic_tac_toe.Domain.Entities.User", "FirstPlayer")
                        .WithMany("MatchesAsFirstPlayer")
                        .HasForeignKey("FirstPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server_tic_tac_toe.Domain.Entities.User", "SecondPlayer")
                        .WithMany("MatchesAsSecondPlayer")
                        .HasForeignKey("SecondPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstPlayer");

                    b.Navigation("SecondPlayer");
                });

            modelBuilder.Entity("server_tic_tac_toe.Domain.Entities.Move", b =>
                {
                    b.HasOne("server_tic_tac_toe.Domain.Entities.GameMatch", "AssociatedMatch")
                        .WithMany("MatchMovements")
                        .HasForeignKey("AssociatedMatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server_tic_tac_toe.Domain.Entities.User", "ResponsiblePlayer")
                        .WithMany("PlayerMovements")
                        .HasForeignKey("ResponsiblePlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssociatedMatch");

                    b.Navigation("ResponsiblePlayer");
                });

            modelBuilder.Entity("server_tic_tac_toe.Domain.Entities.GameMatch", b =>
                {
                    b.Navigation("MatchMovements");
                });

            modelBuilder.Entity("server_tic_tac_toe.Domain.Entities.User", b =>
                {
                    b.Navigation("MatchesAsFirstPlayer");

                    b.Navigation("MatchesAsSecondPlayer");

                    b.Navigation("PlayerMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
